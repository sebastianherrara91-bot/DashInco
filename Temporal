import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from streamlit_elements import elements, mui, html, dashboard
import GraficaBarraDoble as GBD

def main(DataF):

    st.dataframe(DataF, width='stretch', height=500)

    st.sidebar.header("Filtros Dinámicos")

    # Definición de Filtros de un solo Valor Seleccionable___________________________________________________________________________________________________________
    filtros_selectbox = [
        ("Cliente", "Ini_Cliente",False),
        ("Tipo Programa", "Tipo_Programa",True),
        ("Marca", "Marca",False)
    ]
    # Definición de Filtros de múltiples Valores Seleccionables___________________________________________________________________________________________________________
    filtros_multiselect = [
        ("Fit Estilo", "Fit_Estilo",True),
        ("Semana", "Fecha",True)
    ]

    df_filtrado = DataF.copy() # Copia de DataFrame original para aplicar filtros

    # Bucle para Filtros de Selección ÚNICA (selectbox)___________________________________________________________________________________________________________
    for titulo, columna, orden in filtros_selectbox:
        opciones = ['Todos'] + sorted(list(df_filtrado[columna].unique()), reverse=orden)
        seleccion = st.sidebar.selectbox(titulo, opciones)
        if seleccion != 'Todos':
            df_filtrado = df_filtrado[df_filtrado[columna] == seleccion]

    # Bucle para Filtros de Selección MÚLTIPLE (multiselect)___________________________________________________________________________________________________________
    for titulo, columna, orden in filtros_multiselect:
        opciones = sorted(list(df_filtrado[columna].unique()), reverse=orden)
        selecciones = st.sidebar.multiselect(titulo, opciones)
        if selecciones:
            df_filtrado = df_filtrado[df_filtrado[columna].isin(selecciones)]

    # Mostramos el DataFrame filtrado___________________________________________________________________________________________________________
    # st.dataframe(df_filtrado, width='stretch', height=500)

    # Inicio de los cálculos de participación para el gráfico___________________________________________________________________________________________________________
    

    df_simplificado = df_filtrado.groupby(['COLOR','Color_Hexa'],dropna=False).agg({'Cant_Venta': 'sum','Cant_stock': 'sum'}).reset_index()
    df_calculos = df_simplificado.copy()
    total_ventas = df_calculos['Cant_Venta'].sum()
    total_stock = df_calculos['Cant_stock'].sum()
    df_calculos['%_Participacion_Venta'] = (df_calculos['Cant_Venta'] / total_ventas) * 100 if total_ventas else None
    df_calculos['%_Participacion_Stock'] = (df_calculos['Cant_stock'] / total_stock) * 100 if total_stock else None
    df_calculos['Total_Unidades'] = df_calculos['Cant_Venta'] + df_calculos['Cant_stock']
    total_unidades_global = df_calculos['Total_Unidades'].sum()
    df_calculos['%_Participacion_Total'] = (df_calculos['Total_Unidades'] / total_unidades_global) * 100 if total_unidades_global else None


    Col1, Col2 = st.columns(2)

    with Col1:
        slider = st.slider(
            "Quitar % participacion menor a: ", # texto
            min_value=0.00, # valor minimo
            max_value=10.00, # valor maximo
            value=1.50, # Valor Inicial
            step=0.50, # Incremento de 1 en 1
            format="%.2f%%" # Formato de 2 decimales
        )
    
    with Col2:
        st.write(f'Quitar menor a {slider} % de participación')    
    df_calculos = df_calculos[df_calculos['%_Participacion_Total'] >= slider]
    Colores = df_calculos['COLOR'].unique().tolist()
    st.dataframe(df_calculos)


    df_Simp = df_filtrado.groupby(['C_L','Local','Ciudad','COLOR','Color_Hexa'],dropna=False).agg({'Cant_Venta': 'sum','Cant_stock': 'sum'}).reset_index()
    df_ParaFor = df_Simp.copy()
    total_ventas = df_ParaFor['Cant_Venta'].sum()
    total_stock = df_ParaFor['Cant_stock'].sum()
    df_ParaFor['%_Participacion_Venta'] = (df_ParaFor['Cant_Venta'] / total_ventas) * 100 if total_ventas else None
    df_ParaFor['%_Participacion_Stock'] = (df_ParaFor['Cant_stock'] / total_stock) * 100 if total_stock else None
    df_ParaFor['Total_Unidades'] = df_ParaFor['Cant_Venta'] + df_ParaFor['Cant_stock']
    total_unidades_global = df_ParaFor['Total_Unidades'].sum()
    df_ParaFor['%_Participacion_Total'] = (df_ParaFor['Total_Unidades'] / total_unidades_global) * 100 if total_unidades_global else None
    df_ParaFor = df_ParaFor[df_ParaFor['COLOR'].isin(Colores)]

    # Mostramos el DataFrame con los cálculos___________________________________________________________________________________________________________
    df_ParaGrafico = df_ParaFor.copy()
    df_ParaGrafico = df_ParaGrafico.groupby(['COLOR', 'Color_Hexa']).agg({'%_Participacion_Venta': 'sum', '%_Participacion_Stock': 'sum', 'Cant_Venta': 'sum', 'Cant_stock': 'sum'}).reset_index()


    for local in sorted(df_ParaFor['Local'].unique()):
        
        st.subheader(f'{local}')
        df_local = df_ParaFor[df_ParaFor['Local'] == local] 
        # INICIO: Gráfico de Barras de Participación por Color___________________________________________________________________________________________________________
        # 1. Agregamos los datos por COLOR y Color_Hexa para el gráfico___________________________________________________________________________________________________________
        df_chart = df_local.dropna(subset=['COLOR', 'Color_Hexa']).copy()
        df_chart = df_chart.groupby(['COLOR', 'Color_Hexa']).agg({'%_Participacion_Venta': 'sum', '%_Participacion_Stock': 'sum', 'Cant_Venta': 'sum', 'Cant_stock': 'sum'}).reset_index()

        # Solo proceder si tenemos datos para graficar
        if not df_chart.empty:
            # 2. Llamamos a la función reutilizable para crear la gráfica
            fig = GBD.crear_grafica_barra_doble_horizontal(
                dataframe=df_chart,
                eje_y_col='COLOR',
                eje_x_col1='%_Participacion_Venta',
                eje_x_col2='%_Participacion_Stock',
                color_hex_col='Color_Hexa',
                custom_data_col1='Cant_Venta',
                custom_data_col2='Cant_stock',
                titulo="Participación de Ventas y Stock por Color",
                nombre_barra1="% Venta",
                nombre_barra2="% Stock",
                titulo_eje_x="% Participación",
                titulo_eje_y="Color",
                height=500
            )

            # 3. Mostramos el gráfico en Streamlit
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("No hay datos suficientes para generar el gráfico de participación por color después de aplicar los filtros.")
        # FIN: Gráfico de Barras___________________________________________________________________________________________________________



def dashboard_por_talla(DataF):
    st.title("Dashboard Interactivo - Ventas por Talla")
    st.markdown("""
    Este es un dashboard de ejemplo. Arrastra y cambia el tamaño de las tarjetas.
    La data del DataFrame recibido no se usa en este ejemplo, pero podría usarse para llenar los gráficos.
    """)

    def handle_layout_change(updated_layout):
        st.session_state.layout_talla = updated_layout

    default_layout = [
        dashboard.Item("resumen", 0, 0, 4, 2),
        dashboard.Item("grafico_tallas", 4, 0, 8, 4),
        dashboard.Item("tabla_datos", 0, 2, 4, 4),
    ]

    layout = st.session_state.get("layout_talla", default_layout)

    with elements("dashboard_talla"):
        with dashboard.Grid(layout, onLayoutChange=handle_layout_change):
            with mui.Paper(key="resumen", sx={"display": "flex", "flexDirection": "column", "padding": "1em"}):
                mui.Typography("Resumen de Ventas", variant="h5")
                mui.Typography("Aquí irían KPIs como ventas totales, unidades, etc.")

            with mui.Paper(key="grafico_tallas", sx={"display": "flex", "flexDirection": "column", "padding": "1em"}):
                mui.Typography("Gráfico de Ventas por Talla", variant="h5")
                mui.Typography("Aquí puedes poner un gráfico de Plotly o similar.")

            with mui.Paper(key="tabla_datos", sx={"display": "flex", "flexDirection": "column", "padding": "1em"}):
                mui.Typography("Tabla de Datos", variant="h5")
                if not DataF.empty:
                    mui.Typography(f"Recibidos {len(DataF)} registros.")
                else:
                    mui.Typography("No se recibieron datos.")

    st.subheader("Datos del Layout Actual")
    st.json(st.session_state.get("layout_talla", default_layout))