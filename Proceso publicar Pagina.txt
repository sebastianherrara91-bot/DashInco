Guía de Despliegue: Streamlit + Nginx en Contenedor Proxmox (LXC)
================================================================

Nginx actuará como un "reverse proxy" (un intermediario). Esto significa que:
1.  El usuario en internet accederá a tu IP pública (o dominio) por el puerto 80.
2.  Nginx recibirá esa petición.
3.  Nginx la reenviará a tu aplicación Streamlit, que estará corriendo de forma segura en el puerto 8501 dentro del contenedor.

---

### Paso 1: Crear el Contenedor (LXC) en Proxmox

1.  Haz clic en "Create CT".
2.  Usa una plantilla de Debian o Ubuntu moderna.

---

### Paso 2: Preparar el Entorno dentro del Contenedor

1.  **Accede a la consola del contenedor.**

2.  **Instala todas las herramientas necesarias en un solo paso:**
    ```bash
    apt-get update && apt-get install -y git python3 python3-pip python3-venv nginx
    apt-get install -y curl apt-transport-https gnupg
    apt-get install -y unixodbc-dev
    apt-get install -y unixodbc
    curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o /usr/share/keyrings/microsoft-prod.gpg
    curl -fsSL https://packages.microsoft.com/config/debian/11/prod.list | tee /etc/apt/sources.list.d/mssql-release.list
    apt-get update
    ACCEPT_EULA=Y apt-get install -y msodbcsql18
    ACCEPT_EULA=Y apt-get install -y msodbcsql17


    ```

3.  **Clona tu proyecto:**
    ```bash
    # Ve al directorio /opt donde suelen ir las aplicaciones
    cd /opt
    # Clona tu proyecto (reemplaza la URL si es necesario)
    git clone https://github.com/sebastianherrara91-bot/DashInco.git
    cd DashInco
    ```
    *(Si no usas Git, sube tus archivos a `/opt/DashInco` usando `scp` o FileZilla).*

4.  **Crea el entorno virtual e instala las dependencias:**
    ```bash
    # 1. Crea el entorno virtual.
    python3 -m venv venv

    # 2. Activa el entorno.
    source venv/bin/activate
    ```
    **Nota:** Este paso es **crucial**. En Debian moderno, no se pueden instalar paquetes con `pip` fuera de un entorno virtual (causa el error `externally-managed-environment`).

    ```bash
    # 3. Instala las librerías dentro del entorno activado.
    pip install -r requirements.txt
    ```
    *Puedes desactivar el entorno con `deactivate` cuando termines, pero para los siguientes pasos no es necesario.*

---

### Paso 3: Configurar Nginx

1.  **Crea un archivo de configuración para tu app:**
    ```bash
    nano /etc/nginx/sites-available/streamlit_app
    ```

2.  **Pega la siguiente configuración:**
    *(Ctrl+X para salir, 'Y' para guardar, Enter para confirmar)*.
    ```
    server {
        listen 80;
        # Reemplaza esto con tu IP pública o tu nombre de dominio
        server_name 186.31.65.250;

        location / {
            # Apunta a la dirección donde correrá Streamlit
            proxy_pass http://127.0.0.1:8501;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Estas 2 líneas son CRUCIALES para que la interactividad de Streamlit funcione
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_read_timeout 86400;
        }
    }

    ```

3.  **Activa tu configuración y desactiva la de por defecto:**
    ```bash
    # Crea un enlace simbólico para activar tu config
    ln -s /etc/nginx/sites-available/streamlit_app /etc/nginx/sites-enabled/

    # Borra la configuración por defecto para evitar conflictos
    rm /etc/nginx/sites-enabled/default
    ```

4.  **Verifica y reinicia Nginx:**
    ```bash
    nginx -t
    # Si dice "syntax is ok", reinicia el servicio.
    systemctl restart nginx
    ```

---

### Paso 4: Ejecutar Streamlit como un Servicio Permanente

Esto hará que tu app se inicie automáticamente si el contenedor se reinicia.

1.  **Crea el archivo de servicio:**
    ```bash
    nano /etc/systemd/system/streamlit.service
    ```

2.  **Pega la siguiente configuración (¡VERSIÓN CORREGIDA!):**
    Asegúrate de que no haya líneas en blanco ni texto antes de `[Unit]`.
    ```

[Unit]
Description=Servicio para la app de Streamlit
After=network.target

[Service]
User=root
WorkingDirectory=/opt/DashInco

# --- ¡LÍNEA CRÍTICA! ---
# Se usa el ejecutable de streamlit DENTRO del entorno virtual (venv)
# para que encuentre las librerías que instalaste.
ExecStart=/opt/DashInco/venv/bin/streamlit run init.py --server.port=8501 --server.headless=true

Restart=always

[Install]
WantedBy=multi-user.target

    ```

3.  **Inicia y habilita tu servicio:**
    ```bash
    systemctl daemon-reload
    systemctl start streamlit.service
    systemctl enable streamlit.service
    ```

4.  **Verifica que está corriendo:**
    ```bash
    systemctl status streamlit.service
    ```
    Debería mostrar "active (running)" en verde. Si hay un error, puedes ver más detalles con `journalctl -u streamlit.service -n 50`.

---

reiniciar servicios 

systemctl restart streamlit.service

### Paso 5: Redirección de Puertos (Port Forwarding)

Este último paso se hace en la configuración de tu router de internet.
1.  Entra a la configuración de tu router.
2.  Busca la sección "Port Forwarding" o "Redirección de Puertos".
3.  Crea una regla que redirija el tráfico del **puerto 80** (protocolo TCP) a la **IP interna** de tu contenedor Proxmox.

¡Listo! Ahora, al escribir tu IP pública o dominio en un navegador, deberías ver tu aplicación de Streamlit.



from GestorSQL import test_connection
ss= test_connection()
print(ss)
